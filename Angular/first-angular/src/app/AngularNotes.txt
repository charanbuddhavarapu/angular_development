------------------May 16-----------------------------------------------------

Inline styling - per element
Internal styling - per html page
StyleUrl : is the most commonly used style, for every component there is a separate file is created
            and is linked to that particular component file


View Encapsulation
******************
View encapsulation defines whether the template and styles defined within the component can affect the whole application or vice versa. 

Angular provides below encapsulation strategies:
1. Emulated (default) - styles from main HTML(index.html) propagates to the component. 
					Styles defined in component are scoped to that component only.

2. None - styles from the component propagate back to the main HTML and therefore are   visible to all components on the page. 
Be careful with apps that have None components in the application. 
 
3. shadowDOM - Use shadowDOM for style encapsulation (only component css will be applied)
			   1. CSS won't come from main HTML to Component.
			   2. css will be provided from parent to child component.

ex:- encapsulation: ViewEncapsulation.Emulated(default) 
	 encapsulation: ViewEncapsulation.ShadowDom
	 encapsulation: ViewEncapsulation.None
	 

Emulated: index HTML--->parent Component (yes)
		  index HTML-->child component (yes)
		  Parent(Emulated) --> child(Emulated) (No)
ShadowDom: index HTML--->parent Component(shadowDOM) (No)
		   index HTML-->child component (No)
		   Parent (shadowDOM) --> child(Emulated) (Yes)		   
		   Parent (shadowDOM) --> child(ShadowDom) (No)		   
None: index<--->parent Component(None)<-->child component

View Encapsulation : Styles of 1 component do not effect the styles of other component, this is because of view encapsulation
view encapsulation - emulated, shadowDOM, None - 3 types
emulated V.E - default setup 

*******************Directives***************** 

Directives
**********
-Directives Enhance the power of HTML elements.
-Directives add additional behavior to elements in Angular applications.
-Before Angular 17  (*ngIf , *ngSwitchCase, *ngFor)
-After angular-17  (@if , @else , @switch , @case , @default , @for, @empty , @let)

1. Structural Directives : 
	Directive which changes the layout/structure of the DOM.
	* is used with structural directives.
	only 1 structural directive can be applied to an element.

2. Attribute Directives : ([ngStyle],[ngClass])
	Directive which changes behaviour/appearance of the DOM element.
	[ ] is used with attribute direcives.
	many attribute directives can be applied to an element.

Note : Compononent can also be considered as directive, because it powers up the html by creating Custom Element, but the directives cannot be considered as component because it does not have a View (template and templateUrl cannot be used in directives)


====================================================================================================================
 
May 17:

Table and Card View - table-card components
Difference between data list and dropdown

Search and filtering on products

===========================================================================================================
May 19: 

ngStyle - Attribute Directives
we use style only if we have just 1 property to change like [style.color],[style.fontSize],[style.backgroundColor]
<ng-container> can be used as a placeholder element for nested structure of loop, this doesn't create a div in HTML, like <div>


ng-template , ng-container
==========================
-<ng-template> directive represents an Angular template.
-content of this <ng-template> will contain part of a template, that can be composed together with other templates in order to form the final component template. 
-Angular is already using <ng-template> under the hood in many of the structural directives that we use all the time: ngIf, ngFor and ngSwitch
 
-Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.
-if we need a helper element for nested structural directives.<ng-container> can be used instead of creating an un-nscessary element(<div>).



ng-content/ Content projection
==============================
- Parent component passes content to child content, that is called content projection
-child component collects that using nd-content, and then displays it.
- CHILD component sends the content, but then PARENT component has the ability to display the form it wants to show the content(table,card list etc)
- My-modal is CHILD COMPONENT (base), body and footer components use the mymodal component, so they are consumers(Parent Component)
-used to create configurable components.

- to make the title dynamic:
	ngcontent with element selector (span)


-Components that are used in published libraries make use of <ng-content> to make themselves configurable.
-if We want to insert HTML elements or other components in a component, then We do that using the concept of content projection. 
-We achieve content projection using <ng-content></ng-content>
https://www.freecodecamp.org/news/everything-you-need-to-know-about-ng-template-ng-content-ng-container-and-ngtemplateoutlet-4b7b51223691/


child, below are the element selectors
======
<ng-content></ng-content>
<ng-content select="#div1"></ng-content>
<ng-content select=".div2"></ng-content>
<ng-content select="span"></ng-content>

parent
======
<h1 id="div1">Registration Form</h1>
<h1 class="div2">Registration Form</h1>


How to use font-awesome (https://fontawesome.com/v4/icons/)
=======================
1. ng add @fortawesome/angular-fontawesome
			(OR)
   npm install @fortawesome/angular-fontawesome @fortawesome/fontawesome-svg-core 
   npm install @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons
   
2. import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
   import { faStar } from '@fortawesome/free-solid-svg-icons'; / import { faStar } from '@fortawesome/free-regular-svg-icons';
   imports: [FontAwesomeModule]
3. <fa-icon [icon]="faStar"></fa-icon>

=========================================================================================================================

May 20: 

Assignment
----------
1. create 1 EmployeeCRUD component
2. display list of employees in a table(data comes from an array) - View and delete button
3. user should be able to delete Employee (ask user confirmation)  - sweetAlert
4. view the details of each employee in a modal (bootstrap Modal)
5. add a new employee to the table (insert a new record to the array) - we can have a form, have 3-4 input boxes, using template reference or two way Db and insert record to the table
6.   use SnackBar to display message ('EmployAdded Successfully' - message should be maintained in a constant file) - When ever we add an employee, then lets display a message, 
	- don't hardcode, maintain the message in a constants file->messageConstants.TS, under app(create one)
7. use font-awesome to display any icons (star , delete, edit)




Custom Directives - how to create a directive
=================
-Create custom directives to attach custom behavior to elements in the DOM.
-@Directive decorator is used to create a custom Directive.
-directives won't have templates, whereas components have templates.
- when we create a custom directive, it won't have a template, it will generate only 2 files - ts file and unit test file

-@HostBinding  -  Set a property on the host element.
-@HostListener  - Listen events from the host element.


Component vs Directive
----------------------
-Component has View/Template  where as Directives won't have View/Template.
-Components are used to create UI widgets , Directives are used to add behavior to an existing DOM element.


Custom Directive Assignment
============================
1. create a custom directive (zoomout) which scales the element by 150%.


==========================================================================================================
May 21st

Angular Pipes
=============
-transform strings, currency amounts, dates, and other data for display.
-Pipes are used in template expressions to accept an input value and return a transformed value.
 ex: {{ 5000 | currency }}    output: $5,000.00
            (OR)
<div [innerHTML]='name | lowercase'></div>
-To apply a pipe, use the pipe operator (|)  as shown in the above example.

-Angular provides built-in pipes,The following are commonly used built-in pipes for data formatting.
1.lowercase
2.uppercase
3.titlecase
4.currency
5.date
6.number
7.percent	
8.json 
9.keyvalue - Iterate Object
10.slice
11.async(Observable)


curreny
-------                  
{{ 5000 | currency}}
{{ 5000 | currency : 'USD' }} 
{{ 5000 | currency : 'INR' }}
{{mySal | currency : '&euro;'}}
  input | pipeName : arguement
  
Date
-----
<h5>{{today | date : 'shortDate'}}</h5>
<h5>{{today | date : 'mediumDate'}}</h5>
<h5>{{today | date : 'longDate'}}</h5>
<h5>{{today | date : 'fullDate'}}</h5>

<h4>{{ today | date: "fullTime":"UTC" }}</h4>


decimal/number
-------------
<h4>{{ 12.111222333 | number: "3.2-5" }}</h4>     
012.11122

<h4>{{ 12.1 | number: "3.2-5" }}</h4>
o/p:- 012.10

<p>{{0.5 | number:'3.2-5'}} </p> 
o/p:- 000.50 

Use format '3.2-5' : 
minIntegerDigits = 3 
minFractionDigits = 2 
maxFractionDigits = 5 

Percent Pipe
-------------
{{ 2.5 | percent}}  o/p- 250%
{{ 2.5 | percent:'2.2-5'}}  o/p- 250.00%
{{0.024 | percent}}


keyvalue
--------
@for(entry of user | keyvalue;track $index){
   <h5>{{entry.key}}---{{entry.value}}</h5>
}


slice pipe
-----------
-slice pipe can be used with array and string
<h4>{{cars | slice : 2 : 4}}</h4>
<h4>{{myName | slice : 2 : 4}}</h4>
<h4>{{myName | slice : 2 : -1}}</h4>


Custom Pipe
===========
1. ng generate pipe remaining
2. every angular pipe implements PipeTransform Interface
  class RemainingPipe implements PipeTransform {
  }
3. override transform()
   transform(input: any, maxLength = 100) {
       return maxLength - input.length;
   }
   

Assignment
==========
1. Create a custom pipe(ordinal) which takes a number as input and returns in ordinal format
   input : 21,22,23,24  output : 21st, 22nd , 23rd, 24th
2. create a custom pipe(Roman) which takes a number as input and returns its equivalent roman value
   input :  4    8     9   
   output : IV  VIII   IX 
3. create a custom pipe called 'age' which takes a date as input and returns the age in years.
   input : 04-06-2020
   output : 5 years old
4. declare an array of employee objects. display them in a table.
   create a custom pipe Salutation that will add 'mr. / miss.' before the employee name.
5. declare an array of employee objects. display them in a table. 
   add a search-box above the table. create a custom-pipe to filter/search employees data.

================================================================================================================

May 22nd


Pure & Impure Pipe
------------------
-By Default every custom pipe we create is pure pipe.

-A pure pipe's transform() is only called when Angular detects a change in the value or the parameters passed to a pipe.

-An impure pipe's transform() is called for every change detection cycle
 no matter whether the value or parameters change.transform() gets called if any variable in the page chages.
 
-If the pipe has internal state (result depends on state other than its arguments), set pure to false. 
In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed.
 
-to make a pipe impure
  @Pipe({
		name : 'account',
		pure : false
	})

	
Use pipes in component file
---------------------------
1. import pipe class to the component	
   import { UpperCasePipe } from '@angular/common'
   
2. register that pipe service in component
    providers: [UpperCasePipe]
	
3. inject that service to the component
   constructor(private upperCasePipeObj: UpperCasePipe)
   
4. use the pipe using transform()
   this.b = this.upperCasePipeObj.transform(this.a);
	

Use custom pipes in component file
----------------------------------
1. import pipe class to the component	
   import { RemainingPipe } from 'src/app/custom-pipes/remaining.pipe';
   
2. create an instance of that pipe and call transform() with that instance
   const pipeObj = new RemainingPipe();
   const remainingChar = pipeObj.transform('hello', 100);
   console.log(remainingChar);

	


Component Communication
=======================
parent -->  Child    
	property Binding []  
	@input() / inputs:[]
	
child -->  parent   
	event Binding ()
	@output  / outputs:[]
	
Sibling -->  child1--> parent -->child2
			 
@input - is used for  passing input from one child to another - sibling communication

@output binding and () event binding - if child has some data and it wants to send some data to parent , then we use this

<app-child2 [aChild2] = "a" #child1></app-child2> <!--right hand side "a"-> is parent componet, left hand side is reference variable-->
#child1 - template reference variable
in our project - body is parent(for me its app) , pipes is the child, sibling of child are navbar, carousel, dproducts, tableCard etc..


Parent component can reference a template ref variable to child 1 : if Parent wants to access child Data on COMPONENT LOAD/ PAGE LOAD

Q.How can we share data between 2 components (Unrelated Components)
  1. services
  2. Subject / BehaviourSubject
  
  
Props Drilling
==============
-Prop drilling is basically a situation when the same data is being sent at almost every level due to requirements in the final level.
-Solution : State management Library (NgRX)


inputs:['title']
set title(){
	// setter for title input variable
	// this function gets invoked when a new value is assigned to 'title'
}
  
  
  
Child to parent
===============
1. create an EventEmitter Object and emit that event with the data in child component
   import { Component, EventEmitter, OnInit } from '@angular/core';
   myEvent = new EventEmitter();
   sendDataToParent() {
    this.myEvent.emit(this.product);
   }
2. add that event information in outputs:[] of child component
   outputs:['myEvent']
3. add event listener in parent's HTML & TS
   <app-child2 (myEvent)="getDataFromChild($event)"></app-child2>
   getDataFromChild(data:any){
      this.product = data;
   }



