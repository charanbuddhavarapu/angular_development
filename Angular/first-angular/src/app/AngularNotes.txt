------------------May 16-----------------------------------------------------

Inline styling - per element
Internal styling - per html page
StyleUrl : is the most commonly used style, for every component there is a separate file is created
            and is linked to that particular component file


View Encapsulation
******************
View encapsulation defines whether the template and styles defined within the component can affect the whole application or vice versa. 

Angular provides below encapsulation strategies:
1. Emulated (default) - styles from main HTML(index.html) propagates to the component. 
					Styles defined in component are scoped to that component only.

2. None - styles from the component propagate back to the main HTML and therefore are   visible to all components on the page. 
Be careful with apps that have None components in the application. 
 
3. shadowDOM - Use shadowDOM for style encapsulation (only component css will be applied)
			   1. CSS won't come from main HTML to Component.
			   2. css will be provided from parent to child component.

ex:- encapsulation: ViewEncapsulation.Emulated(default) 
	 encapsulation: ViewEncapsulation.ShadowDom
	 encapsulation: ViewEncapsulation.None
	 

Emulated: index HTML--->parent Component (yes)
		  index HTML-->child component (yes)
		  Parent(Emulated) --> child(Emulated) (No)
ShadowDom: index HTML--->parent Component(shadowDOM) (No)
		   index HTML-->child component (No)
		   Parent (shadowDOM) --> child(Emulated) (Yes)		   
		   Parent (shadowDOM) --> child(ShadowDom) (No)		   
None: index<--->parent Component(None)<-->child component

View Encapsulation : Styles of 1 component do not effect the styles of other component, this is because of view encapsulation
view encapsulation - emulated, shadowDOM, None - 3 types
emulated V.E - default setup 

*******************Directives*****************	` 

Directives
**********
-Directives Enhance the power of HTML elements.
-Directives add additional behavior to elements in Angular applications.
-Before Angular 17  (*ngIf , *ngSwitchCase, *ngFor)
-After angular-17  (@if , @else , @switch , @case , @default , @for, @empty , @let)

1. Structural Directives : 
	Directive which changes the layout/structure of the DOM.
	* is used with structural directives.
	only 1 structural directive can be applied to an element.

2. Attribute Directives : ([ngStyle],[ngClass])
	Directive which changes behaviour/appearance of the DOM element.
	[ ] is used with attribute direcives.
	many attribute directives can be applied to an element.

Note : Compononent can also be considered as directive, 
because it powers up the html by creating Custom Element, but the directives cannot be considered as component
 because it does not have a View (template and templateUrl cannot be used in directives)


====================================================================================================================
 
May 17:

Table and Card View - table-card components
Difference between data list and dropdown

Search and filtering on products

===========================================================================================================
May 19: 

ngStyle - Attribute Directives
we use style only if we have just 1 property to change like [style.color],[style.fontSize],[style.backgroundColor]
<ng-container> can be used as a placeholder element for nested structure of loop, this doesn't create a div in HTML, like <div>


ng-template , ng-container
==========================
-<ng-template> directive represents an Angular template.
-content of this <ng-template> will contain part of a template, that can be composed together with other templates in order to form the final component template. 
-Angular is already using <ng-template> under the hood in many of the structural directives that we use all the time: ngIf, ngFor and ngSwitch
 
-Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.
-if we need a helper element for nested structural directives.<ng-container> can be used instead of creating an un-nscessary element(<div>).



ng-content/ Content projection
==============================
- Parent component passes content to child content, that is called content projection
-child component collects that using nd-content, and then displays it.
- CHILD component sends the content, but then PARENT component has the ability to display the form it wants to show the content(table,card list etc)
- My-modal is CHILD COMPONENT (base), body and footer components use the mymodal component, so they are consumers(Parent Component)
-used to create configurable components.

- to make the title dynamic:
	ngcontent with element selector (span)


-Components that are used in published libraries make use of <ng-content> to make themselves configurable.
-if We want to insert HTML elements or other components in a component, then We do that using the concept of content projection. 
-We achieve content projection using <ng-content></ng-content>
https://www.freecodecamp.org/news/everything-you-need-to-know-about-ng-template-ng-content-ng-container-and-ngtemplateoutlet-4b7b51223691/


child, below are the element selectors
======
<ng-content></ng-content>
<ng-content select="#div1"></ng-content>
<ng-content select=".div2"></ng-content>
<ng-content select="span"></ng-content>

parent
======
<h1 id="div1">Registration Form</h1>
<h1 class="div2">Registration Form</h1>


How to use font-awesome (https://fontawesome.com/v4/icons/)
=======================
1. ng add @fortawesome/angular-fontawesome
			(OR)
   npm install @fortawesome/angular-fontawesome @fortawesome/fontawesome-svg-core 
   npm install @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons
   
2. import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
   import { faStar } from '@fortawesome/free-solid-svg-icons'; / import { faStar } from '@fortawesome/free-regular-svg-icons';
   imports: [FontAwesomeModule]
3. <fa-icon [icon]="faStar"></fa-icon>

=========================================================================================================================

May 20: 

Assignment
----------
1. create 1 EmployeeCRUD component
2. display list of employees in a table(data comes from an array) - View and delete button
3. user should be able to delete Employee (ask user confirmation)  - sweetAlert
4. view the details of each employee in a modal (bootstrap Modal)
5. add a new employee to the table (insert a new record to the array) - we can have a form, have 3-4 input boxes, using template reference or two way Db and insert record to the table
6.   use SnackBar to display message ('EmployAdded Successfully' - message should be maintained in a constant file) - When ever we add an employee, then lets display a message, 
	- don't hardcode, maintain the message in a constants file->messageConstants.TS, under app(create one)
7. use font-awesome to display any icons (star , delete, edit)




Custom Directives - how to create a directive
=================
-Create custom directives to attach custom behavior to elements in the DOM.
-@Directive decorator is used to create a custom Directive.
-directives won't have templates, whereas components have templates.
- when we create a custom directive, it won't have a template, it will generate only 2 files - ts file and unit test file

-@HostBinding  -  Set a property on the host element.
-@HostListener  - Listen events from the host element.


Component vs Directive
----------------------
-Component has View/Template  where as Directives won't have View/Template.
-Components are used to create UI widgets , Directives are used to add behavior to an existing DOM element.


Custom Directive Assignment
============================
1. create a custom directive (zoomout) which scales the element by 150%.


==========================================================================================================
May 21st

Angular Pipes
=============
-transform strings, currency amounts, dates, and other data for display.
-Pipes are used in template expressions to accept an input value and return a transformed value.
 ex: {{ 5000 | currency }}    output: $5,000.00
            (OR)
<div [innerHTML]='name | lowercase'></div>
-To apply a pipe, use the pipe operator (|)  as shown in the above example.

-Angular provides built-in pipes,The following are commonly used built-in pipes for data formatting.
1.lowercase
2.uppercase
3.titlecase
4.currency
5.date
6.number
7.percent	
8.json 
9.keyvalue - Iterate Object
10.slice
11.async(Observable)


curreny
-------                  
{{ 5000 | currency}}
{{ 5000 | currency : 'USD' }} 
{{ 5000 | currency : 'INR' }}
{{mySal | currency : '&euro;'}}
  input | pipeName : arguement
  
Date
-----
<h5>{{today | date : 'shortDate'}}</h5>
<h5>{{today | date : 'mediumDate'}}</h5>
<h5>{{today | date : 'longDate'}}</h5>
<h5>{{today | date : 'fullDate'}}</h5>

<h4>{{ today | date: "fullTime":"UTC" }}</h4>


decimal/number
-------------
<h4>{{ 12.111222333 | number: "3.2-5" }}</h4>     
012.11122

<h4>{{ 12.1 | number: "3.2-5" }}</h4>
o/p:- 012.10

<p>{{0.5 | number:'3.2-5'}} </p> 
o/p:- 000.50 

Use format '3.2-5' : 
minIntegerDigits = 3 
minFractionDigits = 2 
maxFractionDigits = 5 

Percent Pipe
-------------
{{ 2.5 | percent}}  o/p- 250%
{{ 2.5 | percent:'2.2-5'}}  o/p- 250.00%
{{0.024 | percent}}


keyvalue
--------
@for(entry of user | keyvalue;track $index){
   <h5>{{entry.key}}---{{entry.value}}</h5>
}


slice pipe
-----------
-slice pipe can be used with array and string
<h4>{{cars | slice : 2 : 4}}</h4>
<h4>{{myName | slice : 2 : 4}}</h4>
<h4>{{myName | slice : 2 : -1}}</h4>


Custom Pipe
===========
1. ng generate pipe remaining
2. every angular pipe implements PipeTransform Interface
  class RemainingPipe implements PipeTransform {
  }
3. override transform()
   transform(input: any, maxLength = 100) {
       return maxLength - input.length;
   }
   

Assignment
==========
1. Create a custom pipe(ordinal) which takes a number as input and returns in ordinal format
   input : 21,22,23,24  output : 21st, 22nd , 23rd, 24th
2. create a custom pipe(Roman) which takes a number as input and returns its equivalent roman value
   input :  4    8     9   
   output : IV  VIII   IX 
3. create a custom pipe called 'age' which takes a date as input and returns the age in years.
   input : 04-06-2020
   output : 5 years old
4. declare an array of employee objects. display them in a table.
   create a custom pipe Salutation that will add 'mr. / miss.' before the employee name.
5. declare an array of employee objects. display them in a table. 
   add a search-box above the table. create a custom-pipe to filter/search employees data.

================================================================================================================

May 22nd


Pure & Impure Pipe
------------------
-By Default every custom pipe we create is pure pipe.

-A pure pipe's transform() is only called when Angular detects a change in the value or the parameters passed to a pipe.

-An impure pipe's transform() is called for every change detection cycle
 no matter whether the value or parameters change.transform() gets called if any variable in the page chages.
 
-If the pipe has internal state (result depends on state other than its arguments), set pure to false. 
In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed.
 
-to make a pipe impure
  @Pipe({
		name : 'account',
		pure : false
	})

	
Use pipes in component file
---------------------------
1. import pipe class to the component	
   import { UpperCasePipe } from '@angular/common'
   
2. register that pipe service in component
    providers: [UpperCasePipe]
	
3. inject that service to the component
   constructor(private upperCasePipeObj: UpperCasePipe)
   
4. use the pipe using transform()
   this.b = this.upperCasePipeObj.transform(this.a);
	

Use custom pipes in component file
----------------------------------
1. import pipe class to the component	
   import { RemainingPipe } from 'src/app/custom-pipes/remaining.pipe';
   
2. create an instance of that pipe and call transform() with that instance
   const pipeObj = new RemainingPipe();
   const remainingChar = pipeObj.transform('hello', 100);
   console.log(remainingChar);

	


Component Communication
=======================
parent -->  Child    
	property Binding []  
	@input() / inputs:[]
	
child -->  parent   
	event Binding ()
	@output  / outputs:[]
	
Sibling -->  child1--> parent -->child2
			 
@input - is used for  passing input from one child to another - sibling communication

@output binding and () event binding - if child has some data and it wants to send some data to parent , then we use this

<app-child2 [aChild2] = "a" #child1></app-child2> <!--right hand side "a"-> is parent componet, left hand side is reference variable-->
#child1 - template reference variable
in our project - body is parent(for me its app) , pipes is the child, sibling of child are navbar, carousel, dproducts, tableCard etc..


Parent component can reference a template ref variable to child 1 : if Parent wants to access child Data on COMPONENT LOAD/ PAGE LOAD

Q.How can we share data between 2 components (Unrelated Components)
  1. services
  2. Subject / BehaviourSubject
  
  
Props Drilling
==============
-Prop drilling is basically a situation when the same data is being sent at almost every level due to requirements in the final level.
-Solution : State management Library (NgRX)


inputs:['title']
set title(){
	// setter for title input variable
	// this function gets invoked when a new value is assigned to 'title'
}
  
  
  
Child to parent
===============
1. create an EventEmitter Object and emit that event with the data in child component
   import { Component, EventEmitter, OnInit } from '@angular/core';
   myEvent = new EventEmitter();
   sendDataToParent() {
    this.myEvent.emit(this.product);
   }
2. add that event information in outputs:[] of child component
   outputs:['myEvent']
3. add event listener in parent's HTML & TS
   <app-child2 (myEvent)="getDataFromChild($event)"></app-child2>
   getDataFromChild(data:any){
      this.product = data;
   }


==============================================================================================================
May 23rd 


component lifecycle hooks/method 
================================
constructor - ngOnChanges - ngOnInit  - ngDoCheck - ngAfterContentInit - 
ngAfterContentChecked - ngAfterViewInit - ngAfterViewChecked - ngOnDestroy. (1+8)

* These methods get automatically invoked, when a component is created
* Regular Function - we have to invoked
* Life Cycle methods - automatic invoke, the order is already defined(just as our human life cycle is pre defined)

* Constructore is not a life cycle method , it is from JS not from Angular(so 1 + 8 )

* When ngOnDestroy is called - > component will be deleted from the DOM soon, it will no loger be available

* Whenever you want to implement lifecycle methods ( They are interfaces ), so implement interface.
* WIthout implementing the interface also we can write ngOnInit() function, and others as well.
afterNextRender(() => {
});

 
3 steps to use lifecycle HOOKS, they are:
========================================
1. Import Hook interfaces from '@angular/core' library
   ex:- import {onChanges} from '@angular/core'

2. Declare that component/directive and implement lifecycle hook interface
   ex: class ChildComponent implements onChanges
		{
		}
3. write the hook method and define the functionality of that method.
		ex: class ChildComponent implements onChange
		{
			ngOnChanges()
			{
				//logic
			}
		}	
ex- ngOnChanges() is a method from 'OnChanges' interface


The hooks/lifecycle methods are executed in this order:
--------------------------------------------------------
constructor()
-This is invoked when Angular creates a component or directive by calling new on the class.
-We use constructor to Initialize class variables,dependency Injection.
   a:number ->declare, in constructor function a=10->initialization
- In angular we don't use new key word to create object of a class, rather we use private ele:ElementRef - > dependency injection
-No Business Logic should be written in constructor.

ngOnChanges()
-ngOnchanges() will not be invoked if the component doesn't have inputs:[]
   
-Invoked every time there is a change in one of the input properties of the component.
* If a child component wants to keep an eye on the inputs[] properties, then we use ngOnChanges
-inside ngOnchanges() we can access previous and current value of a variable.
 * We can also capture what was the current value and prev value of the variable we used in inputs[].


ngOnInit()
-Invoked for every component when a component gets Initialized.
-This hook is called only once, after the first ngOnChanges.not after every ngOnchanges()
-Time Consuming Logic goes here. Ex:- API Call
 * To hit a URL and fetch the data, for this purpose we use ngOnInit().


ngDoCheck()
-Invoked when the change detector of the given component is invoked. 
   * Lets say our req is to know whenever the variable of component changes, the parent component should be notified, then ngDoCheck() will be called.
-It allows us to implement our own change detection algorithm for the given component.
-useful to detect and act upon the changes that can not be detected by Angular on its own.
-Due to default behavior of angular change detection, ngOnChanges can't detect if someone changes a property of an object or push an item into array. So ngDoCheck comes to recuse.
-Detect deep changes like a property change in object or item is pushed into array even without reference change.
-By using ngDoCheck and KeyValueDiffer, we can monitor changes in complex objects that might not be caught by Angular's default change detection mechanism.

ngDoCheck() - will force the below 4 methods to be called.

ngAfterContentInit()
-Invoked after Angular performs any content projection into the components view 
-Runs only once after the first ngDoCheck(), if ngDoCkeck() is called 100 times also, ngAfterContentInit() is called only once.
-Use ngAfterContentInit to call something once after all of the content has been initialized


ngAfterContentChecked() 
-Invoked each time the content of the given component has been checked by the change detection mechanism of Angular.
-is called after ngAfterContentInit for the first time.
-is called after every subsequent ngDoCheck


ngAfterViewInit() 
- Best place to check if the component is ready for DOM manipulation.
- After the view is completely initialized , then this function is called.
-Invoked when the component's view has been fully initialized.
-this is the best place for DOM manipulation. it is used for DOM manipulation logic.
- lets say on page load itself, for an input box the focus(| blinking), we can use DOM manipulation logic for it.
-is called once after ngAfterContentChecked.
-ngAfterViewInit() is called after all child components are initialized and checked.


ngAfterViewChecked() 
-is called after every subsequent ngAfterContentChecked.
 
 
ngOnDestroy()
-This method is invoked just before Angular destroys the component.
-Clean up code.  ex:- clearInterval(),clearTimeout(); unsubscribe();

- we write the cleanup logic just like finally in java.


N.p-ngDoCheck and ngOnChanges should not be implemented together on the same component



=================================================================================================================
May 24

Angular Services
****************
- share logic/data across components.
- code Reusability
	(write once use that in multiple components)
- Lazily instantiated
	(Angular only instantiates a service when a component depends on it)
- Singletons
	(Each component dependent on a service gets a reference to the single instance generated by the service factory.only one instance of the service gets created through-out the application)

-create a service using angular CLI
 ng generate service myService
		


steps to create and use service
--------------------------------
1. create a service (ng g s service-name)
	a. class with set of methods and properties.
	b. decorate that class with @injectable decorator

* Injectable, directive, pipes are classes with @Injectable decorator, @directive Decorator, @Pipe Decorator
	 
2. use a service in component
   a. import service to component file
   b. create a referrence variable for that service(inside constructor) / Dependency Injection
   c. using the referrence variale make use of methos and properties from service
   
	class MathComponent{
		constructor(private mathObj : MathService){
			
		}
	}
			(OR)
	class MathComponent{
		constructor(){
			this.mathObj = inject(MathService);
		}
	}
 
 
Dependency injection 
=====================
-Dependency injection (DI), is an application design pattern. 
-Dependency Injection framework provides declared/mentioned dependencies to a class when that class is instantiated.   

constructor(private myHttp:HttpClient){}
	OR
constructor(){
	 this.myhttp = inject(HttpClient);
}



Assignment
==========
1. create an EmployeeService
	Service should have 1 variable.  ex: employees = [ {}, {}, {} {}]   
	Service should have 3 methods.   ex: getAllEmployees(), getMaleEmployees(), getFemaleEmployees()
2. inject that service in EmployeeComponent
3. Display List of Employees in a table / Card
   have a dropdown with 3 values- allEmployees , maleEmployees , femaleEmployees
   based on the dropdown value selected, employee data should be shown.




Communicating with backend services using HTTP
==============================================
-frontEnd applications need to communicate with a server to Fetch or Send data.
-Using HttpClient an angular application can communicate with server.


HTTP Methods
============
GET - Retrieve a resource/Retrieve data from DB
	  search
	  
POST - to send data to server  ( sign up ) 
	   create a resource/create a new record in DB
	   to fetch data securly    (send params in body not in URL)

PUT - update data/create or replace a resource  
	    
PATCH - update/modify a resource
		update password/update mobile number 

DELETE - remove a resource/delete a record from DB 
		 Delete naukri account
		 

PUT vs POST
-----------
-PUT for UPDATE operations, POST for CREATE operations.
-PUT is idempotent, where POST is non-idempotent.
-Idempotence(producing the same result even if the same request is made multiple times)
-(PUT)if you retry a request N times, that should be equivalent to single request modification.
-(POST)if you retry the request N times, you will end up having N resources with N different URIs created on server.
-Use PUT when you want to modify a singular resource which is already a part of resources collection.
-Use POST when you want to add a child resource under resources collection.


Idempotent
----------
-It ensures that multiple identical requests will have similar response no matter how many times they get called.



PUT vs PATCH
------------
-PUT is used to replace an existing resource.
-PATCH is used to apply partial modifications to a resource.

		 
http status codes
=================
1xx Informational  (100-Continue,101-switching Protocols,102-processing)
2xx Success		   (200-OK,201-created,202-accepted,204-No Content)
3xx Redirection	   (300-Multiple Choices,301-Moved Permanently,302-Found,304-Not Modified)
4xx Client Error   (400-Bad Request,401-Unauthorized,403-Forbidden,404-Not Found)
5xx Server Error   (500-Internal Server Error,502-Bad Gateway,503-Service Unavailable)



POSTMAN
=======
-application / Chrome extension used to Test REST APIs.
 https://www.postman.com/downloads/


Free Online REST API for Testing 
1. https://jsonplaceholder.typicode.com/users
2. https://reqres.in/
3. https://fakestoreapi.com/products
4. https://api.github.com/users/google
5. https://dummyjson.com/products
6. https://dummy.restapiexample.com/  (CRUD)
7. https://my-json-server.typicode.com/horizon-code-academy/fake-movies-api/movies
8. https://api.publicapis.org/entries
9. https://github.com/geertjanw/ojet-training/blob/master/employeeData.json


Create REST API with json-server
================================
- In real time we will not use json- server package. . This is just for training.
- Say in pur project, we have our company's APIs.

https://medium.com/@devmrin/create-a-rest-api-json-server-in-less-than-1-minute-acf286600f03

1.Install json-server (not necessarily inside angular project, run the below command in cmd)
	npm install -g json-server
2.create a json file with some data(not necessarily inside an angular project)
    employees.json (filename can be anything.json) (copy con employees.json)(MAC: touch employees.json)
3.start json server(go to the folder where json file is present,run the below command in cmd)
   json-server --watch employees.json
   
http://localhost:3000/employees   
GET    /employees
GET    /employees/{id}
POST   /employees
PUT    /employees/{id}
PATCH  /employees/{id}
DELETE /employees/{id}
  
===================================================================================================================
May 26


HttpClient vs fetch()
=====================
-fetch() returns Promise , whereas HttpClient returns Observable.
-HttpClient Supports RxJS observable-based APIs.
-data returned by fetch() needs to be converted to JSON using json()
 ex: fetch('url').then(data=>data.json())
     .then(finalData=>console.log(finalData))
-HttpClient comes with built-in CSRF protection , fetch() doesn't
-HttpClient has interceptor to Intercept request and response. fetch() doesn't

//When our requirement is to fetch real time date - then use HTTP client module.
- In our "app.config.ts" - add provideHttpClient() in providers array .
- Either in a service or a component, make http call.
- If data is req is multiple components, use it in service, if req by only one module 
- When ever we return a value from fetch methods - it returns a PROMISE.
- If a function returns a promise, how to get data from promise? - 2 options : 1. THEN method, 2. Async Await.
- To read data from an observable - we use SUBSCRIBE

CSRF, or Cross-Site Request Forgery:
===================================
https://portswigger.net/web-security/csrf#what-is-csrf
https://portswigger.net/web-security/all-topics

-Angular looks for a cookie named XSRF-TOKEN.
-If found, Angular automatically adds a header X-XSRF-TOKEN with the same value to all unsafe requests.



Assignment
==========
1. Create 1 user CRUD application using HttpClient
	a. fetch the data and display in a table (json-server)
	b. create a form, collect form data and make a post call to add a new user
	c. add 'delete' button against every user, on click 'delete', delete that user
	d. display 'Loading...' text/Image when data is being fetched
	e. implement update functionality to update the data
	f. write all the logics in a service for code reusability



HttpClient with Headers
=======================
-Reading the full response(not only the body)
 httpClient.get(URL)	//  { observe: 'body' } (default)
 httpClient.get(URL , { observe: 'body' })     
 httpClient.get(URL , { observe: 'response' })  // returns { body:[],status:200,ok:true}
 
==============================================================================================================

May 27

models in Angular
=================
-A Model represents the structure/shape of the data object.
-Handling raw JSON objects is really painful and hard to maintain.
 ex:-Users have a firstName and a lastName.the full name of the user within the templates looks like this:
     <li *ngFor="let user of users">{{ user.firstName }} {{ user.lastName }}</li>
	what if customer calls and tells that the order of firstname and lastname should be switched,go through every template and switch the expressions.
-If our user is a User object, we can simply implement a function to print the fullname.
 
-Another good reason for using models is type enforce. We want to know the type of things when we use them and not just define everything as any.

-Interfaces are used in Typescript to perform type-checking,Interface cannot be used to instantiate.
-Classes are used not only for type-checking but also if we need some methods,they are used to instantiate.


InterFace As Model: 
	1. Improves Readability
	2. Structure Enforcement : only the fields mentioned in interface can be used in view.
	
Class As Model: 
	1. Improves Readability
	2. Structure Enforcement 
	3. Logic (fullName() , annualSalary())



Http Interceptor
================
-interceptors are used to pre-process and post-process the HTTP request.
-Used before sending request and after getting response from the server. 

Use Cases:
-Add an Access Token or some custom HTTP header for all outgoing HTTP requests.
-Create a global Error catch incase HTTP Request fails.
-Create a mock response to test.
-Log all HTTP activity in the console.
-Catch HTTP responses to do some custom formatting (i.e. convert CSV to JSON) 
 before handing the data over to your service/component.


How to Use Interceptors
=======================
1. Create Interceptor ( ng generate interceptor logger)
	import { HttpInterceptorFn } from '@angular/common/http';
	export const logInterceptor: HttpInterceptorFn = (req, next) => {
	  console.log('I am Inetrceptor')
	  return next(req);
	};
2. register the interceptor (app.config.ts)
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptors([logInterceptor]))
  ],




Authentication Vs Authorization
===============================
-Authentication is the process of verifying a users identity.(login)
 Who You are
-Authorization Decides if you have access to a resource.
 What you can do
 



	
observables
***********
-An Observable is an entity that emits (or publishes) multiple data values (stream of data)over time and asynchronously.
-Observables are lazy collections of multiple values over time.
-Observables help to manage asynchronous data, such as data coming from a backend service.
-To use observables, Angular uses a library called Reactive Extensions (RxJS).
-used for event handling, asynchronous programming, and handling multiple values.


Promise vs Observables
**********************
-Promise return all the data at once, where as observable return multiple values over a period of time.
-promise is not lazy. observable is lazy(observable is not called until we subscribe to the observable)
-promise is not cancellable, where as observable can be cancelled using unsubscribe()
-Promise doesn't have operators, observable has different operators (map,filter,reduce,retry,tap,catchError)
 
Promises:
-----------
1. return a single value
2. not cancellable
3. more readable code with try/catch and async/await
4. no Operator support (map,filter,reduce,retry,tap)
5. then()

Observables: - Pub-sub model(airtel-customers)
-----------
1. multiple values over time
2. cancellable
3. support Operators like:- tap(),retry(),distinctUntilChanged(),map()
4. use Reactive Extensions (RxJS)
5. subscribe()

- Observer follows publisher and Subscribe model - pubsub model.



========================================================================================================

May 29

RxJS
====
-RxJS is a library for composing asynchronous and event-based programs by using observable sequences.

RxJS Operators
--------------
Creation			from, of, interval, range
Combination			forkjoin, combineLatest, concat, merge,mergeAll, startWith ,zip, race
Filtering			debounceTime, distinctUntilChanged, filter, take, takeUntil, first
Transformation		bufferTime, concatMap, map, mergeMap/flatMap, scan, switchMap
Utility				tap,delay,repeat
Error Handling      catchError , retry, retryWhen
Mathematical  		count, max , min , reduce





    // publisher
    const observable1 = new Observable((publisher) => {
      publisher.next('AAAAAAAA')
      publisher.next('BBBBBBBB')
      publisher.next('CCCCCCCC')
      publisher.next('DDDDDDDD')
      publisher.complete();
    });

    // subscriber
   this.producer1.subscribe({
    next: (v) => console.log(v),
    error: (e) => console.error(e),
    complete: () => console.info('completed')
   });
   
   
   
Digital Clock
=============
this.time$ = new Observable<string>(observer => {
   setInterval(() => observer.next(new Date().toLocaleTimeString()), 1000);
});






forkjoin()
---------
- In JS, we use Promise.all, but in Angular we use Fork Join
- Whenevery reponses are coming from Multiple APIs, and which ever observer API takes highest time, that is the time taken by Forkall
- Takes any number of inputs when they come as array, only care about final emitable of an observale.
-forkJoin is an operator that takes any number of input observables passed as an array of input observables.
-This operator is best used when you have a group of observables and only care about the final emitted value of each.
-One common use case is if you wish to issue multiple requests on page load (or some other event) and only want to take action when a response has been received for all. this is similar to Promise.all()

- Number of inner API calls completely depends on the OuterAPI calls.

movies - [ 1,2,3,4,5]
		1 - imdb API
		2 - imdb API
		

map() vs mergemap() vs concatmap() vs switchmap():
--------------------------------------------------
- Incase of forkjoin, w
Map() :  For each value that the Observable emits we can apply a function in which we can modify the data
		 
mergeMap() = map + mergeAll
	-Merging values from two or more HTTP Calls.(Siblings)
    -MergeMap never cancels any of its inner observable. It waits for them to finish and emit value.
	-MergeMap does not care about the order.
	-inner observables might finish in an order that is different from the order in which they are subscribed
	-receive data from an observable (outer observable). For each of those values, you want to call another observable (inner observable) to get more data.
	-mergeMap the movie into an http request to IMDB and by that, to enhance your movie cards with this additional data
	
	outerObservable.pipe(mergeMap(OuterObservableResponse => {
      return this.httpClient.get(`https://jsonplaceholder.typicode.com/users/${OuterObservableResponse}`)
    })).subscribe(innerObservableResponse => {
      console.log(innerObservableResponse)
    })

	 
concatMap() = map + concatAll
- The only differenc bw mergemap and concat map is that order will be maintained here.
    -Map values to inner observable, subscribe and emit in order.
	-concatMap waits for inner Observable to complete before taking items from the next inner Observable.
	-concatMap does preserve the order from outer Observable.
	-inner observables are sequential
	-Like mergeMap, concatMap also doesnt cancel any inner Observables. 
	 All data from inner Observables get to the final collection.
	-Queuing up every new Observable, and subscribing to a new observable only when the last observable completed.
    -If the order of emission and subscription of inner observables is important, try concatMap.
	
	
switchMap() = map + switch  (Sky, skybags)
	-Switching to the Most Recent Observable & cancelling previous observables.
	-SwitchMap emits items only from the most recent inner Observable.
	-SwitchMap cancels previous inner Observables when a new inner Observable appears. 
	-A very common use case for switchMap is a search Typeahead.
	 where we are no longer concerned with the response of the previous request when a new input arrives.
	-If only one inner subscription should be active at a time, try switchMap

   
ExhaustMap()
	-Map to inner observable, ignore other values until that observable completes.
	-Do not disturb! operator.
	-we have a login screen with a login button, where each click is mapped to 1 login request.
	-If the user clicks more than once on the login button, it will cause multiple calls to the server.
	-use exhaustMap to temporarily disable the mapping while the first http request is still on the go.
	-
	-this makes sure you never call the server while the current request is running.




Hot and Cold Observables
========================
-A hot Observable begins emitting items as soon as it is created, and so any observer who later subscribes to that Observable may start observing the sequence somewhere in the middle.
-A cold Observable, waits until an observer/consumer subscribes to it before it begins to emit items,such an observer is guaranteed to see the whole sequence from the beginning.
-Normal Observables are 'cold', Subject,BehaviourSubject,ReplaySubject are 'hot'.


============================================================================================
June 2nd


Hot and Cold Observables
========================
-A hot Observable begins emitting items as soon as it is created, and so any observer who later subscribes to that Observable may start observing the sequence somewhere in the middle.
-A cold Observable, waits until an observer/consumer subscribes to it before it begins to emit items,such an observer is guaranteed to see the whole sequence from the beginning.
-Normal Observables are 'cold', Subject,BehaviourSubject,ReplaySubject are 'hot'.


		
Subject
=======
-An observable allows us only to subscribe  whereas a subject allows us to both publish and subscribe.
-A subject allows our services to be used as both a publisher and a subscriber.
-Subjects are like EventEmitters: they maintain a registry of many listeners.
-Subject is a special type of Observable that allows values to be multicasted to many Observers,While plain Observables are unicast.
-data can be pushed into a subject and the subjects subscribers will in turn receive that pushed data.
-The real power of subjects comes into play with multicasting, where a subject is passed as the 
observer to an observable,which will mean that, when the observable emits, the data is multicasted to all of the subjects subscriptions.
-The 'asObservable' operator can be used to transform a subject into an observable.
-A subject can emit data, on top of having the capability to be subscribed to.
-To feed a new value to the Subject, just call next(theValue), and it will be multicasted to the Observers registered to listen to the Subject.
-use a Subject in a service to fetch some data, and send the result to all components that subscribed to that Subject.

-A BehaviorSubject is a Subject that can emit the current value
(Subjects have no concept of current value)
-With behavior subjects, it does not matter when you subscribe, 
you always get the latest value right away.


	Observable 							   Subjects  
=================================================================================
-Is just a function, no state        	-Has state. Stores data in memory
-Cold									-Hot   
-Code run for each observer           	-Same code run once for all observers
-Creates only Observable             	-Can create and also listen Observable
 ( data producer alone )                 ( data producer and consumer )      

-Usage: 							    -Usage: 
Simple Observable with only                        
one Obeserver.                       	* Store data and modify frequently  
										* Multiple observers listen to data


Observables
===========
1. They are cold: Code gets executed when they have at least a single observer.
2. Creates copy of data: Observable creates copy of data for each observer.(for each subscriber, observer creates a copy)
3. Uni-directional: Observer/subscriber can not assign value to observable.

Subjects (Subject,ReplaySubject,BehaviorSubject)
================================================
1. They are hot: code gets executed and value gets broadcasted even if there is no observer/consumer/subscriber.
2. Shares data: Same data gets shared between all observers.
3. bi-directional: Observer/subscriber can assign value to observable.


	subjects				Each Next Subscribers receive
=========================================================
Subject		 ---------- Only Upcoming values
BehaviorSubject-------  one previous value(current/initial) & upcoming values
ReplaySubject---------  all previous values and upcoming values
AsyncSubject  --------  latest value when stream gets closed (complete)



Assignment
==========
create 1 employee crud application using 'subject' 



What are signals
================
-A signal is a special type of variable that holds a value. it also provides notification when the variable value changes
-A signal is a wrapper around a value that notifies interested consumers when that value changes. 
-Signals can contain any value, from primitives to complex data structures.
-We read a signal's value by calling its getter function, which allows Angular to track where the signal is used.
-Signals may be either writable or read-only
-A signal is not a replacement for RxJS and Observables for asynchronous operations, such as http.get


=============================================================================================================
June 3rd

Forms in Angular
================
-Forms are used to collect the data from the user.

1. Template driven
2. Model Driven Form / Reactive Form


Template Driven Forms Features
------------------------------
-Easy to use
-Suitable for simple scenarios and fails for complex scenarios
-Two way data binding(using [(NgModel)] syntax)
-Minimal component code and more HTML Code
-FormsModule needs to be imported

-Unit testing is a challenge(testing validation logic)
-limited capabilities to implement dynamic aspects like 
 variable number of fields, repetitive fields, etc.


Model driven forms/Reactive Forms 
---------------------------------
-More flexible
-Handles any complex scenarios
-More component code and less HTML markup
-Adding elements dynamically
-Better unit testing(testing validation logic)
-Supports creation of forms with dynamic structure at runtime
-Uses ReactiveFormsModule



Classes:
-------
ng-pristine : No user interaction occured/not yet modified
ng-dirty : User interaction occured/modified
ng-valid : It meets all the validation
ng-invalid : One of the Validation is not meeting
ng-touched: already touched (blur)
ng-untouched: not yet touched



Template Driven Form
--------------------
1. import FormsModule to our Component
   imports: [FormsModule]

2. view/HTML File-
   a. use 'ngForm' with form's template reference variable
      <form #myForm="ngForm" ></form>
	  
   b. Use ngModel with every input field 
      <input name="firstName" ngModel /> 
   
   c. use 'ngModelGroup' to group multiple fields
	 <fieldset ngModelGroup="address">...</fieldset>

3. Receive the data in component class from our form
   <form #myForm="ngForm" (submit)="printFormData(myForm)"></form>
   
   printFormData(formInfo) {
		console.log(formInfo.value);
   }
  



FormControl
-----------
-we can get access to the FormControl instance by assigning ngModel to the element.
 <input type="text" name="firstname" #fname="ngModel" ngModel>
-the variable #fname holds the reference to the firstname FormControl. 
 We can then access the properties of FormControl, like: value, valid, invalid, touched etc.
  <h3>{{fname.value}}</h1>
 
 

Set value in template-driven forms
----------------------------------
There are two ways we can set the value of the form elements:
1. Two-way data binding (recomended)
	user: any = { fname: 'sachin', lname: 'tendulkar' };
	
	<p>First Name: <input name="firstName" ngModel [(ngModel)]='user.fname'/></p>
    <p>Last Name: <input name="lastName" ngModel [(ngModel)]='user.lname'></p>
	
2. Use the template reference variable


Reset the form
--------------
<button type="reset">reset</button>
	(OR)
<form #myForm="ngForm" (reset)="reset(myForm)">
reset(myForm :NgForm) {
  console.log('Do Something...');
  myForm.resetForm();
}


Validation
----------
<input name="firstName" #fname="ngModel" [(ngModel)]='user.fname' required minlength="5" />
 <span *ngIf="fname.hasError('required') && fname.dirty" class="text-danger">Plz fill firstname</span>
<span *ngIf="fname.hasError('minlength') && fname.dirty" class="text-danger">Minimum 5 chars required</span>

<input type="email" name="email" #emailRef="ngModel" [(ngModel)]='user.email' required email />
<span *ngIf="emailRef.hasError('required') && emailRef.dirty" class="text-danger">plz fill email</span>
<span *ngIf="emailRef.hasError('email') && emailRef.dirty" class="text-danger">email format is not correct</span>



Assignment
----------
-Create a Registration form with validation (inputbox,radio,checkbox,dropdown,textarea)
https://www.tektutorialshub.com/angular/template-driven-form-validation-in-angular/



Model driven form
-----------------
1. import ReactiveFormsModule 
	a. import { ReactiveFormsModule } from '@angular/forms';
	b. imports:[ReactiveFormsModule]  
	
2. view 
	a. use formGroup with form
		<form [formGroup]="registerForm"> </form>
	b. use formControlName with every form field
		<input formControlName="firstname">
	c. use formGroupName to group multiple form fields.
	    <fieldset formGroupName="address">...</fieldset>

3. Component
	a. create FormGroup class Object to group fields
		new FormGroup({    })
	b. create FormControl class object for each form fields
		new FormControl()



Validate a form on change/blur/submit
-------------------------------------
lastname: new FormControl("tendulkar",
      { validators: [Validators.required], updateOn: "blur" }
    )	
new FormGroup({fName:new FormControl()}, { updateOn: 'submit' })




FormBuilder
===========
-Angular FormBuilder API makes it easier to build reactive forms.
-We can easily add the FormGroup, nested FormGroups, FormArrays & FormControls.
-Provides factory methods like .group() , .array() which simplify form creation


without FormBuilder
===================
loginForm = new FormGroup({
	  email: new FormControl('')
	  password: new FormControl('')
});


With FormBuilder
================
1. inject FormBuilder into our component class
    constructor(private formBuilder: FormBuilder) {
	}
2. loginForm = this.formBuilder.group({
	  email: [''],
	  password: [''],
	  address: this.formBuilder.group({});
	});


SetValue and PatchValue
=======================
SetValue: 
-It accepts an object that matches the structure of the FormGroup with control names as key.
-we need all control data to match the structure and then bind the data to the form
ex: this.myForm.setValue({fName:'abc',lName:'pqr',email:''})

PatchValue: 
-It accepts an object and does its best to match the values. 
-It can accept partial form group structure.
ex: this.myForm.patchValue({name:'UpdatedName'})
	


	